generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  role      Role     @default(EMPLOYEE)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  dailyLogs    DailyLog[]
  assignedTrips Service[]   @relation("AssignedTo")
  cancellations Cancellation[]

  @@map("users")
}

enum Role {
  EMPLOYEE
  EMPLOYER
}

model Vehicle {
  id           Int      @id @default(autoincrement())
  licensePlate String   @unique @map("license_plate")
  currentKm    Float    @map("current_km")
  status       String
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  dailyLogs DailyLog[]

  @@map("vehicles")
}

model DailyLog {
  id        Int       @id @default(autoincrement())
  date      DateTime  @db.Date
  kmStart   Float     @map("km_start")
  kmEnd     Float?    @map("km_end")
  notes     String?
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @map("user_id")
  vehicle   Vehicle? @relation(fields: [vehicleId], references: [id])
  vehicleId Int?     @map("vehicle_id")

  @@map("daily_logs")
}

model Service {
  id             Int      @id @default(autoincrement())
  date           DateTime @db.Date
  time           DateTime @db.Time
  pickupLocation String   @map("pickup_location")
  clientName     String   @map("client_name")
  destination    String
  passengers     Int
  bags           Int
  children       Int
  childrenAges   String?  @map("children_ages")
  stops          String?
  clientContact  String?  @map("client_contact")
  notes          String?
  status         TripStatus @default(PENDING)
  paymentStatus  PaymentStatus @default(UNPAID) @map("payment_status")
  amount         Float?
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  assignedTo     User?   @relation("AssignedTo", fields: [assignedToId], references: [id])
  assignedToId   Int?    @map("assigned_to_id")

  cancellation   Cancellation?

  @@map("services")
}

model Cancellation {
  id         Int      @id @default(autoincrement())
  reason     String
  timestamp  DateTime @default(now())
  
  service    Service  @relation(fields: [serviceId], references: [id])
  serviceId  Int      @unique @map("service_id")
  user       User     @relation(fields: [userId], references: [id])
  userId     Int      @map("user_id")

  @@map("cancellations")
}

enum TripStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELED
}

enum PaymentStatus {
  PAID
  UNPAID
}